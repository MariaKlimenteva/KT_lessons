Какие системные вызовы знаем:
getgid() - возвращает действительный идентификатор группы текущего процесса; 
getpid() - возвращает идентификатор вызвавшего процесса; 
getppid() - возвращает идентификатор процесса, являющегося родительским по отношению к вызвавшему процессу; 
getuid() - возвращает фактический идентификатор (ID) пользователя вызывающего процесса 

fork() - при вызове fork() порождается новый процесс (процесс-потомок), который почти идентичен порождающему процессу-родителю; 
exec() - когда мы уже создали процесс с помощью fork(), мы можем запустить программу с помощью вызова exec; 

аргументы командной строки
argc — число параметров
argv — нуль-терминальный массив указателей на строки параметров командной строки
env — нуль-терминальный массив указателей на строки переменных окружения. Каждая строка в формате ИМЯ=ЗНАЧЕНИЕ

int open(const char *pathname, int flags) - Получив в pathname имя файла, open() возвращает файловый дескриптор - небольшое, неотрицательное значение 
для использования в последующих системных вызовах (read(2), write(2), lseek(2), fcntl(2) и т.д.); O_CREAT || O_EXCL
int close (int fd); - закрывает файл, если файлы не закрывать самостоятельно, 
то соответствующие дескрипторы не освобождаются, что может привести к превышению лимита открытых файлов 
umask(0); umask используется функцией open(2) для установки стандартных прав только что созданного файла. 
Если быть точнее, права в umask исключаются из прав доступа параметра mode в функции open(2) 
read(); ssize_t read (int fd, void * buffer, size_t count);
write(); ssize_t write (int fd, const void * buffer, size_t count); 
pipe(); pipe - создает канал  int pipe2(int pipefd[2], int flags);
pipe(int pipefd[2])
mknod(); 
mkfifo(); именованный pipe  создает особый FIFO-файл (именованный канал)  
ftok();

shmget(); shmat(); shmdt(); shmctl();

pthread_self(); pthread_create(); pthread_join(); pthread_exit();

semget(); semop(); semctl();

Команды:
cd
ls (-a)
man
pwd вывести в терминал путь к текущей папке
chmod изменение прав
mkdir используется для создания новых директорий
rm (-r) fordir
mv old new
touch генерация пустых файлов
vim
cat очень просто посмотреть содержимое небольшого файла, склеить несколько файлов/ 
задача команды cat очень проста - она читает данные из файла или стандартного ввода и выводит их на экран
cp Копирует файлы и директории из одного места в другое. 

ipcs выдает информацию об используемых в данный момент средствах межпроцессной связи
выдается краткая информация об очередях сообщений, разделяемых сегментах памяти и семафорах

ipcrm Команда ipcrm удаляет один или несколько идентификаторов очереди сообщений, разделяемого сегмента памяти или семафора
ps посмотреть процессы в текущей оболочке 

Переменные окружения в Linux - это специальные переменные, определенные оболочкой и используемые программами во время выполнения

env По умолчанию с помощью env можно посмотреть все установленные переменные среды.
Но с опцией -i она позволяет временно удалить все переменные оболочки и выполнить команду без переменных.

mcedit 
export отмечает переменную окружения для экспорта с любым новым дочерним процессом, 
и это позволяет дочернему процессу наследовать все отмеченные переменные

переменное окружение
2 части: теор и практ
теор: ничем нельзя пользоваться, 1-я часть: название команды из списка по тому что делает(5 шт), вопросы по системным вызовам, прокомментить кусок кода
практ часть: 2-3 простые задачи и 1 сложная
на 8: решить все и начать делать сложную задачу

после дня с кр: защита задания: 